package service

import "fmt"

func HandleOctetString(octet []byte) ([]byte, []byte) {
	//receivedBytes := []byte{126, 0, 86, 1, 2, 0, 0, 33, 88, 232, 229, 214, 85, 45, 81, 244, 221, 211, 121, 161, 48, 159, 98, 68, 32, 16, 209, 220, 248, 180, 89, 194, 128, 0, 187, 253, 229, 212, 166, 22, 70, 23, 141, 116, 224, 208, 225, 177, 128, 0, 185, 53, 48, 220, 24, 13, 170, 65, 17, 68, 212, 21, 238, 32, 114, 63, 212, 30, 87, 226, 60, 141, 85, 63, 0, 96, 103, 219, 67, 195, 128, 0, 68, 41, 240, 208, 251, 138, 95, 233, 43, 138, 188, 195, 64, 166, 234, 195, 155, 182, 178, 5, 64, 100, 0, 211, 207, 131, 139, 144, 147, 131, 128, 0, 161, 43, 126, 74, 48, 115, 228, 240, 51, 216, 80, 224, 20, 204, 203, 224, 232, 40, 166, 25, 108, 84, 252, 47, 157, 223, 46, 1, 24, 44, 128, 0, 244, 210, 186, 162, 42, 102, 4, 168, 215, 139, 87, 185, 5, 146, 166, 232, 120, 118, 190, 156, 97, 156, 188, 36, 88, 72, 162, 8, 106, 6, 128, 0, 64, 67, 55, 173, 233, 224, 165, 96, 133, 115, 12, 127, 165, 123, 161, 194, 195, 138, 94, 153, 217, 162, 182, 137, 71, 32, 241, 51, 182, 52, 128, 0, 146, 37, 115, 217, 179, 93, 178, 46, 38, 24, 143, 112, 206, 178, 172, 252, 94, 98, 152, 126, 243, 65, 104, 80, 228, 108, 40, 255, 140, 192, 128, 0, 21, 119, 195, 215, 148, 31, 159, 72, 73, 90, 163, 253, 7, 195, 88, 92, 7, 101, 232, 199, 237, 165, 195, 197, 20, 164, 218, 12, 223, 138, 128, 0, 94, 27, 146, 170, 60, 244, 95, 85, 95, 80, 245, 74, 16, 106, 94, 113, 143, 80, 242, 228, 41, 102, 33, 154, 225, 187, 102, 156, 97, 72, 128, 0, 101, 111, 193, 226, 194, 140, 89, 152, 128, 170, 216, 209, 229, 188, 81, 94, 168, 128, 173, 163, 221, 221, 205, 107, 212, 98, 124, 223, 179, 237, 128, 0, 17, 217, 20, 126, 75, 15, 139, 4, 23, 14, 55, 156, 25, 252, 195, 230, 112, 156, 99, 214, 152, 102, 169, 175}
	receivedBytes := octet
	length := len(receivedBytes)
	if length < 10 {
		fmt.Println("Error: Insufficient bytes in receivedBytes.")
	}
	Header := receivedBytes[:7]
	firstRand := receivedBytes[8:24]
	firstAutn := receivedBytes[26:42]
	fmt.Println("Header: ", Header)
	fmt.Println("firstRand: ", firstRand)
	fmt.Println("firstAutn: ", firstAutn)

	count := 42
	for i := 0; i <= 9; i++ {
		fmt.Println("AUTN:", i, receivedBytes[count:count+16])
		fmt.Println("RAND:", i, receivedBytes[count+16:count+32])
		count = count + 32
	}

	OriginalNASMessage := receivedBytes[:42]
	OtherNASMessage := receivedBytes[42:202]

	return OriginalNASMessage, OtherNASMessage
}

func HandleOtherMessage(OtherMessage []byte) {
	Message := OtherMessage
	fmt.Println("Other Message: ", Message)

	// Store into Redius
}
